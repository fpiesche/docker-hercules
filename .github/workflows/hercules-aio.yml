name: Build all-in-one

on:
  # Allow manual runs.
  workflow_dispatch:
  # Also run on updates to this repo.
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
  # Run on PRs except for documentation
  pull_request:
    paths-ignore:
      - '**/*.md'

env:
  PLATFORMS: linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/amd64
  IMAGE_NAME: hercules-aio
  PUSH_IMAGE: ${{ github.ref == 'refs/heads/main' }}
  DEFAULT_PACKETVER: '20190605'
  BUILD_RELEASE: true

jobs:

  build-aio-release:
    name: Build release image
    runs-on: ubuntu-latest

    strategy:
      max-parallel: 1
      matrix:
        HERCULES_SERVER_MODE: ['renewal', 'classic']
        HERCULES_PACKET_VERSION: [ '20190605' ]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Get latest Hercules tag
        run: |
          cd hercules
          git fetch --tags
          LATEST_TAG_REV=$(git rev-list --tags --max-count 1)
          HERCULES_TAG=$(git describe --tags ${LATEST_TAG_REV})
          echo "HERCULES_TAG=${HERCULES_TAG}" >> $GITHUB_ENV
          echo "HERCULES_IMAGE_TAG=${HERCULES_TAG//+/_}" >> $GITHUB_ENV
          git checkout ${HERCULES_TAG}

      - name: Get Hercules packet version
        run: |
          if [ ${{ matrix.HERCULES_PACKET_VERSION }} == "latest" ]; then
            # Extract packet version date string from source if we're building "latest"
            HERCULES_PACKETVER=$(cat hercules/src/common/mmo.h | sed -n -e 's/^.*#define PACKETVER \(.*\)/\1/p')
            echo "HERCULES_PACKETVER=${HERCULES_PACKETVER}" >> $GITHUB_ENV
          else
            # If we're building a specified packet version, just write that to the variable instead
            echo "HERCULES_PACKETVER=${{ matrix.HERCULES_PACKET_VERSION }}" >> $GITHUB_ENV
          fi

      - name: Check whether latest release needs building
        if: ${{ env.PUSH_IMAGE == 'true' }}
        run: |
          # Check whether there already is a Docker image for the current tag
          SERVER_TAGS=$(curl -s https://registry.hub.docker.com/v1/repositories/${{ secrets.DOCKERHUB_USERNAME }}/hercules/tags | jq -r ".[].name") || SERVER_TAGS="none"
          for tag in ${SERVER_TAGS[@]}; do
            if [[ "$tag" == "${HERCULES_TAG}" ]]; then
              echo "Release ${tag} has already been built."
              echo "BUILD_RELEASE=false" >> $GITHUB_ENV
              break
            fi
          done

      - name: Docker Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v1

      - uses: haya14busa/action-cond@v1
        id: image_tags
        name: Define tags for image
        with:
          # Mark classic image with packet version ${{ env.DEFAULT_PACKETVER }} as the default on "hercules" repo
          cond: ${{ matrix.HERCULES_SERVER_MODE == 'classic' && env.HERCULES_PACKETVER == env.DEFAULT_PACKETVER }}
          if_true: |
            ${{ secrets.DOCKERHUB_USERNAME || 'nobody' }}/hercules:latest
            ${{ secrets.DOCKERHUB_USERNAME || 'nobody' }}/hercules:${{ env.HERCULES_IMAGE_TAG }}
            ${{ secrets.DOCKERHUB_USERNAME || 'nobody' }}/hercules-${{ matrix.HERCULES_SERVER_MODE }}-packetver-${{ env.HERCULES_PACKETVER }}:${{ env.HERCULES_IMAGE_TAG }}
            ${{ secrets.DOCKERHUB_USERNAME || 'nobody' }}/hercules:${{ matrix.HERCULES_SERVER_MODE }}-packetver-${{ env.HERCULES_PACKETVER }}-${{ env.HERCULES_IMAGE_TAG }}
            ghcr.io/${{ github.repository_owner }}/hercules:latest
            ghcr.io/${{ github.repository_owner }}/hercules:${{ env.HERCULES_IMAGE_TAG }}
            ghcr.io/${{ github.repository_owner }}/hercules-${{ matrix.HERCULES_SERVER_MODE }}-packetver-${{ env.HERCULES_PACKETVER }}:${{ env.HERCULES_IMAGE_TAG }}
            ghcr.io/${{ github.repository_owner }}/hercules:${{ matrix.HERCULES_SERVER_MODE }}-packetver-${{ env.HERCULES_PACKETVER }}-${{ env.HERCULES_IMAGE_TAG }}
          if_false: |
            ${{ secrets.DOCKERHUB_USERNAME || 'nobody' }}/hercules-${{ matrix.HERCULES_SERVER_MODE }}-packetver-${{ env.HERCULES_PACKETVER }}:${{ env.HERCULES_IMAGE_TAG }}
            ${{ secrets.DOCKERHUB_USERNAME || 'nobody' }}/hercules:${{ matrix.HERCULES_SERVER_MODE }}-packetver-${{ env.HERCULES_PACKETVER }}-${{ env.HERCULES_IMAGE_TAG }}
            ghcr.io/${{ github.repository_owner }}/hercules-${{ matrix.HERCULES_SERVER_MODE }}-packetver-${{ env.HERCULES_PACKETVER }}:${{ env.HERCULES_IMAGE_TAG }}
            ghcr.io/${{ github.repository_owner }}/hercules:${{ matrix.HERCULES_SERVER_MODE }}-packetver-${{ env.HERCULES_PACKETVER }}-${{ env.HERCULES_IMAGE_TAG }}

      - name: Login to DockerHub
        if: ${{ env.PUSH_IMAGE == 'true' }}
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        if: ${{ env.PUSH_IMAGE == 'true' }}
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build Hercules
        uses: docker/build-push-action@v2
        with:
          context: hercules-build
          file: hercules-build/docker-stages/build-hercules.dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: false
          build-args: |
            HERCULES_SERVER_MODE=${{ matrix.HERCULES_SERVER_MODE }}
            HERCULES_PACKET_VERSION=${{ env.HERCULES_PACKETVER }}
            GIT_VERSION=${{ env.HERCULES_TAG }}
          outputs: type=tar,dest=${{ github.workspace }}/artifacts/${{ env.HERCULES_IMAGE_TAG }}.tar

      - name: List artifacts output
        run: ls -la ${{ github.workspace }}/artifacts/

      # - name: Build ${{ env.IMAGE_NAME }} Docker image
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: hercules-build
      #     file: hercules-build/Dockerfile.all-in-one
      #     tags: ${{ steps.image_tags.outputs.value }}
      #     platforms: ${{ env.PLATFORMS }}
      #     push: ${{ env.PUSH_IMAGE }}
      #     build-args: |
      #       HERCULES_SERVER_MODE=${{ matrix.HERCULES_SERVER_MODE }}
      #       HERCULES_PACKET_VERSION=${{ env.HERCULES_PACKETVER }}
      #       GIT_VERSION=${{ env.HERCULES_TAG }}
